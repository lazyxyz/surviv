@use "../../palette.scss";
@use "../../variables";

.inventory {
  
  // items meaning medicals & ammos
  &-items {
    position: absolute;
    top: 5px;
    right: 5px;
  
    display: flex;
    flex-direction: column-reverse;
    gap: 8px;

    &-card {
      display: flex;
      align-items: center;
  
      background-color: rgba(0, 0, 0, 0.30);
      opacity: 0.35;
      padding: 6px;
  
      // when you pick something, we should display this item available
      &.has-item {
        opacity: 1;
      }
    
      .item-count {
        font-size: 14px;
        color: white;
        
        @media screen and (max-width: variables.$screen_medium) {
          font-size: 10px;
        }
      }
    }

    &-medicals {
      display: flex;
      flex-direction: column;
      align-items: end;
      gap: 6px;
      height: fit-content;

      &-card {
        gap: 24px;

        .item-image {
          width: 28px;
          height: 28px;
            
          @media screen and (max-width: variables.$screen_medium) {
            width: 16px;
            height: 16px;
          }
        }
  
        @media screen and (max-width: variables.$screen_medium) {
          gap: 6px;
        }
      }

      @media screen and (max-width: variables.$screen_medium) {
        flex-direction: row;
      }

      @media screen and (max-width: variables.$screen_xsmall) {
        flex-direction: column;
      }
    }
  
    &-ammos {
      display: flex;
      gap: 6px;
  
      &-card {
        flex-direction: column;
  
        // instead wrapper using flex and gap to space items
        &:not(:first-child) {
          margin-top: 6px;
        }

        .item-image {
          width: 20px;
          height: 20px;
            
          @media screen and (max-width: variables.$screen_medium) {
            width: 16px;
            height: 16px;
          }
        }

        @media screen and (max-width: variables.$screen_medium) {
          flex-direction: row;
          gap: 6px;
        }
      }
    }

    @media screen and (max-width: variables.$screen_medium) {
      flex-direction: row;
    }

    @media screen and (max-width: variables.$screen_xsmall) {
      flex-direction: column;
    }
  }

  &-weapons {
    position: absolute;
    right: 5px;
    bottom: 5px;

    display: flex;
    gap: 6px;
    flex-direction: column;

    &-container {
      opacity: 0.65;
      border-radius: 6px;
      min-height: 32px;
      
      &.active {
        background-color: rgba(0, 0, 0, 0.40);
        opacity: 1;
      }
      
      &-card {
        display: flex;
        justify-content: space-between;
        gap: 72px;

        padding: 6px;
        min-height: 40px;
  
        .item-image {
          width: 40px;
          height: 40px;
  
          &.is-fists {
            background-repeat: no-repeat space;
            background-position-x: 50%;
            background-size: 19px;
            transform: rotate(90deg);
          }

          @media screen and (max-width: variables.$screen_medium) {
              width: 20px;
              height: 20px;
          }
        }

        .slot-number {
          @media screen and (max-width: variables.$screen_medium) {
            display: none;
          }
        }

        .item-name {
          font-size: 12px;
          font-weight: bold;

          // why handle absolute? that support for no-distort
          position: absolute;
          inset: auto 0 0 auto; 
          white-space: pre;

          @media screen and (max-width: variables.$screen_medium) {
            font-size: 10px;

            bottom: 50%;
            transform: translateY(50%);
          }
        }
        
        &-slot {
          display: flex;
          flex-direction: column;
          align-items: flex-end;
          flex: 1;
          position: relative;
        }

        @media screen and (max-width: variables.$screen_medium) {
          align-items: center;
          min-height: unset;
          gap: 40px;
        }
      }
    }

    @media screen and (max-width: variables.$screen_medium) {
      bottom: calc(80px + 5px); // 5px meaning offset
    }

    @media screen and (max-width: variables.$screen_xsmall) {
      bottom: calc(230px + 5px); // 5px meaning offset
    }
  }
}